/* eslint-disable */
// source: fpa.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.filecoin.fpa.pb.AddCidReply', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.AddCidRequest', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.AddFileReply', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.AddFileRequest', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.CreateReply', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.CreateRequest', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.GetReply', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.GetRequest', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.InfoReply', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.InfoRequest', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowReply', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowReply.ColdInfo', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowReply.FilInfo', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowReply.FilStorage', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowReply.HotInfo', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.ShowRequest', null, global);
goog.exportSymbol('proto.filecoin.fpa.pb.WalletInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.AddCidRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.AddCidRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.AddCidRequest.displayName = 'proto.filecoin.fpa.pb.AddCidRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.AddCidReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.AddCidReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.AddCidReply.displayName = 'proto.filecoin.fpa.pb.AddCidReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.AddFileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.AddFileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.AddFileRequest.displayName = 'proto.filecoin.fpa.pb.AddFileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.AddFileReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.AddFileReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.AddFileReply.displayName = 'proto.filecoin.fpa.pb.AddFileReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.GetRequest.displayName = 'proto.filecoin.fpa.pb.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.GetReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.GetReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.GetReply.displayName = 'proto.filecoin.fpa.pb.GetReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.CreateRequest.displayName = 'proto.filecoin.fpa.pb.CreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.CreateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.CreateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.CreateReply.displayName = 'proto.filecoin.fpa.pb.CreateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowRequest.displayName = 'proto.filecoin.fpa.pb.ShowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.InfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.InfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.InfoRequest.displayName = 'proto.filecoin.fpa.pb.InfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.InfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.filecoin.fpa.pb.InfoReply.repeatedFields_, null);
};
goog.inherits(proto.filecoin.fpa.pb.InfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.InfoReply.displayName = 'proto.filecoin.fpa.pb.InfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.WalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.WalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.WalletInfo.displayName = 'proto.filecoin.fpa.pb.WalletInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowReply.displayName = 'proto.filecoin.fpa.pb.ShowReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowReply.HotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowReply.HotInfo.displayName = 'proto.filecoin.fpa.pb.ShowReply.HotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.displayName = 'proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowReply.ColdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowReply.ColdInfo.displayName = 'proto.filecoin.fpa.pb.ShowReply.ColdInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.filecoin.fpa.pb.ShowReply.FilInfo.repeatedFields_, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowReply.FilInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowReply.FilInfo.displayName = 'proto.filecoin.fpa.pb.ShowReply.FilInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.fpa.pb.ShowReply.FilStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.fpa.pb.ShowReply.FilStorage.displayName = 'proto.filecoin.fpa.pb.ShowReply.FilStorage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.AddCidRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.AddCidRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.AddCidRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddCidRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.AddCidRequest}
 */
proto.filecoin.fpa.pb.AddCidRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.AddCidRequest;
  return proto.filecoin.fpa.pb.AddCidRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.AddCidRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.AddCidRequest}
 */
proto.filecoin.fpa.pb.AddCidRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.AddCidRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.AddCidRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.AddCidRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddCidRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.AddCidRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.AddCidRequest} returns this
 */
proto.filecoin.fpa.pb.AddCidRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.AddCidReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.AddCidReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.AddCidReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddCidReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.AddCidReply}
 */
proto.filecoin.fpa.pb.AddCidReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.AddCidReply;
  return proto.filecoin.fpa.pb.AddCidReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.AddCidReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.AddCidReply}
 */
proto.filecoin.fpa.pb.AddCidReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.AddCidReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.AddCidReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.AddCidReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddCidReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.AddFileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.AddFileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.AddFileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddFileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.AddFileRequest}
 */
proto.filecoin.fpa.pb.AddFileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.AddFileRequest;
  return proto.filecoin.fpa.pb.AddFileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.AddFileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.AddFileRequest}
 */
proto.filecoin.fpa.pb.AddFileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.AddFileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.AddFileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.AddFileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddFileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.filecoin.fpa.pb.AddFileRequest.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.filecoin.fpa.pb.AddFileRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.AddFileRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.filecoin.fpa.pb.AddFileRequest} returns this
 */
proto.filecoin.fpa.pb.AddFileRequest.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.AddFileReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.AddFileReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.AddFileReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddFileReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.AddFileReply}
 */
proto.filecoin.fpa.pb.AddFileReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.AddFileReply;
  return proto.filecoin.fpa.pb.AddFileReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.AddFileReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.AddFileReply}
 */
proto.filecoin.fpa.pb.AddFileReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.AddFileReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.AddFileReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.AddFileReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.AddFileReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.AddFileReply.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.AddFileReply} returns this
 */
proto.filecoin.fpa.pb.AddFileReply.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.GetRequest}
 */
proto.filecoin.fpa.pb.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.GetRequest;
  return proto.filecoin.fpa.pb.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.GetRequest}
 */
proto.filecoin.fpa.pb.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.GetRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.GetRequest} returns this
 */
proto.filecoin.fpa.pb.GetRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.GetReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.GetReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.GetReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.GetReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.GetReply}
 */
proto.filecoin.fpa.pb.GetReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.GetReply;
  return proto.filecoin.fpa.pb.GetReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.GetReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.GetReply}
 */
proto.filecoin.fpa.pb.GetReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.GetReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.GetReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.GetReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.GetReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.filecoin.fpa.pb.GetReply.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.filecoin.fpa.pb.GetReply.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.GetReply.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.filecoin.fpa.pb.GetReply} returns this
 */
proto.filecoin.fpa.pb.GetReply.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.CreateRequest}
 */
proto.filecoin.fpa.pb.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.CreateRequest;
  return proto.filecoin.fpa.pb.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.CreateRequest}
 */
proto.filecoin.fpa.pb.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.CreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.CreateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.CreateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.CreateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.CreateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.CreateReply}
 */
proto.filecoin.fpa.pb.CreateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.CreateReply;
  return proto.filecoin.fpa.pb.CreateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.CreateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.CreateReply}
 */
proto.filecoin.fpa.pb.CreateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.CreateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.CreateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.CreateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.CreateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.CreateReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.CreateReply} returns this
 */
proto.filecoin.fpa.pb.CreateReply.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.filecoin.fpa.pb.CreateReply.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.CreateReply} returns this
 */
proto.filecoin.fpa.pb.CreateReply.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowRequest}
 */
proto.filecoin.fpa.pb.ShowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowRequest;
  return proto.filecoin.fpa.pb.ShowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowRequest}
 */
proto.filecoin.fpa.pb.ShowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.ShowRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.ShowRequest} returns this
 */
proto.filecoin.fpa.pb.ShowRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.InfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.InfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.InfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.InfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.InfoRequest}
 */
proto.filecoin.fpa.pb.InfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.InfoRequest;
  return proto.filecoin.fpa.pb.InfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.InfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.InfoRequest}
 */
proto.filecoin.fpa.pb.InfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.InfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.InfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.InfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.InfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.filecoin.fpa.pb.InfoReply.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.InfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.InfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.InfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.InfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wallet: (f = msg.getWallet()) && proto.filecoin.fpa.pb.WalletInfo.toObject(includeInstance, f),
    pinsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.InfoReply}
 */
proto.filecoin.fpa.pb.InfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.InfoReply;
  return proto.filecoin.fpa.pb.InfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.InfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.InfoReply}
 */
proto.filecoin.fpa.pb.InfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.filecoin.fpa.pb.WalletInfo;
      reader.readMessage(value,proto.filecoin.fpa.pb.WalletInfo.deserializeBinaryFromReader);
      msg.setWallet(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.InfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.InfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.InfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.InfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.filecoin.fpa.pb.WalletInfo.serializeBinaryToWriter
    );
  }
  f = message.getPinsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.InfoReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.InfoReply} returns this
 */
proto.filecoin.fpa.pb.InfoReply.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional WalletInfo wallet = 2;
 * @return {?proto.filecoin.fpa.pb.WalletInfo}
 */
proto.filecoin.fpa.pb.InfoReply.prototype.getWallet = function() {
  return /** @type{?proto.filecoin.fpa.pb.WalletInfo} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.fpa.pb.WalletInfo, 2));
};


/**
 * @param {?proto.filecoin.fpa.pb.WalletInfo|undefined} value
 * @return {!proto.filecoin.fpa.pb.InfoReply} returns this
*/
proto.filecoin.fpa.pb.InfoReply.prototype.setWallet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.fpa.pb.InfoReply} returns this
 */
proto.filecoin.fpa.pb.InfoReply.prototype.clearWallet = function() {
  return this.setWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.fpa.pb.InfoReply.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string pins = 3;
 * @return {!Array<string>}
 */
proto.filecoin.fpa.pb.InfoReply.prototype.getPinsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.filecoin.fpa.pb.InfoReply} returns this
 */
proto.filecoin.fpa.pb.InfoReply.prototype.setPinsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.filecoin.fpa.pb.InfoReply} returns this
 */
proto.filecoin.fpa.pb.InfoReply.prototype.addPins = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filecoin.fpa.pb.InfoReply} returns this
 */
proto.filecoin.fpa.pb.InfoReply.prototype.clearPinsList = function() {
  return this.setPinsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.WalletInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.WalletInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.WalletInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.WalletInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.WalletInfo}
 */
proto.filecoin.fpa.pb.WalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.WalletInfo;
  return proto.filecoin.fpa.pb.WalletInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.WalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.WalletInfo}
 */
proto.filecoin.fpa.pb.WalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.WalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.WalletInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.WalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.WalletInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.WalletInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.WalletInfo} returns this
 */
proto.filecoin.fpa.pb.WalletInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 balance = 2;
 * @return {number}
 */
proto.filecoin.fpa.pb.WalletInfo.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.fpa.pb.WalletInfo} returns this
 */
proto.filecoin.fpa.pb.WalletInfo.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    created: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hot: (f = msg.getHot()) && proto.filecoin.fpa.pb.ShowReply.HotInfo.toObject(includeInstance, f),
    cold: (f = msg.getCold()) && proto.filecoin.fpa.pb.ShowReply.ColdInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowReply}
 */
proto.filecoin.fpa.pb.ShowReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowReply;
  return proto.filecoin.fpa.pb.ShowReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowReply}
 */
proto.filecoin.fpa.pb.ShowReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 3:
      var value = new proto.filecoin.fpa.pb.ShowReply.HotInfo;
      reader.readMessage(value,proto.filecoin.fpa.pb.ShowReply.HotInfo.deserializeBinaryFromReader);
      msg.setHot(value);
      break;
    case 4:
      var value = new proto.filecoin.fpa.pb.ShowReply.ColdInfo;
      reader.readMessage(value,proto.filecoin.fpa.pb.ShowReply.ColdInfo.deserializeBinaryFromReader);
      msg.setCold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.filecoin.fpa.pb.ShowReply.HotInfo.serializeBinaryToWriter
    );
  }
  f = message.getCold();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.filecoin.fpa.pb.ShowReply.ColdInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowReply.HotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowReply.HotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ipfs: (f = msg.getIpfs()) && proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowReply.HotInfo}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowReply.HotInfo;
  return proto.filecoin.fpa.pb.ShowReply.HotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowReply.HotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowReply.HotInfo}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 2:
      var value = new proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo;
      reader.readMessage(value,proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.deserializeBinaryFromReader);
      msg.setIpfs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowReply.HotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowReply.HotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIpfs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 size = 1;
 * @return {number}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.HotInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional IpfsHotInfo ipfs = 2;
 * @return {?proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.getIpfs = function() {
  return /** @type{?proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo, 2));
};


/**
 * @param {?proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo|undefined} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.HotInfo} returns this
*/
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.setIpfs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.fpa.pb.ShowReply.HotInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.clearIpfs = function() {
  return this.setIpfs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.fpa.pb.ShowReply.HotInfo.prototype.hasIpfs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo}
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo;
  return proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo}
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 created = 1;
 * @return {number}
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.IpfsHotInfo.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowReply.ColdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowReply.ColdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    filecoin: (f = msg.getFilecoin()) && proto.filecoin.fpa.pb.ShowReply.FilInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowReply.ColdInfo}
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowReply.ColdInfo;
  return proto.filecoin.fpa.pb.ShowReply.ColdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowReply.ColdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowReply.ColdInfo}
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.filecoin.fpa.pb.ShowReply.FilInfo;
      reader.readMessage(value,proto.filecoin.fpa.pb.ShowReply.FilInfo.deserializeBinaryFromReader);
      msg.setFilecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowReply.ColdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowReply.ColdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilecoin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.filecoin.fpa.pb.ShowReply.FilInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilInfo filecoin = 1;
 * @return {?proto.filecoin.fpa.pb.ShowReply.FilInfo}
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.prototype.getFilecoin = function() {
  return /** @type{?proto.filecoin.fpa.pb.ShowReply.FilInfo} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.fpa.pb.ShowReply.FilInfo, 1));
};


/**
 * @param {?proto.filecoin.fpa.pb.ShowReply.FilInfo|undefined} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.ColdInfo} returns this
*/
proto.filecoin.fpa.pb.ShowReply.ColdInfo.prototype.setFilecoin = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.fpa.pb.ShowReply.ColdInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.prototype.clearFilecoin = function() {
  return this.setFilecoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.fpa.pb.ShowReply.ColdInfo.prototype.hasFilecoin = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowReply.FilInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadcid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalsList: jspb.Message.toObjectList(msg.getProposalsList(),
    proto.filecoin.fpa.pb.ShowReply.FilStorage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilInfo}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowReply.FilInfo;
  return proto.filecoin.fpa.pb.ShowReply.FilInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilInfo}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadcid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    case 3:
      var value = new proto.filecoin.fpa.pb.ShowReply.FilStorage;
      reader.readMessage(value,proto.filecoin.fpa.pb.ShowReply.FilStorage.deserializeBinaryFromReader);
      msg.addProposals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowReply.FilInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayloadcid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getProposalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.filecoin.fpa.pb.ShowReply.FilStorage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string payloadCid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.getPayloadcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.setPayloadcid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 duration = 2;
 * @return {number}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FilStorage proposals = 3;
 * @return {!Array<!proto.filecoin.fpa.pb.ShowReply.FilStorage>}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.getProposalsList = function() {
  return /** @type{!Array<!proto.filecoin.fpa.pb.ShowReply.FilStorage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.filecoin.fpa.pb.ShowReply.FilStorage, 3));
};


/**
 * @param {!Array<!proto.filecoin.fpa.pb.ShowReply.FilStorage>} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilInfo} returns this
*/
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.setProposalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilStorage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilStorage}
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.addProposals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.filecoin.fpa.pb.ShowReply.FilStorage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilInfo} returns this
 */
proto.filecoin.fpa.pb.ShowReply.FilInfo.prototype.clearProposalsList = function() {
  return this.setProposalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.fpa.pb.ShowReply.FilStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalcid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    failed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilStorage}
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.fpa.pb.ShowReply.FilStorage;
  return proto.filecoin.fpa.pb.ShowReply.FilStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilStorage}
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalcid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.fpa.pb.ShowReply.FilStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.fpa.pb.ShowReply.FilStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalcid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string ProposalCid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.prototype.getProposalcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilStorage} returns this
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.prototype.setProposalcid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool Failed = 2;
 * @return {boolean}
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.prototype.getFailed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.filecoin.fpa.pb.ShowReply.FilStorage} returns this
 */
proto.filecoin.fpa.pb.ShowReply.FilStorage.prototype.setFailed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.fpa.pb.ShowReply} returns this
 */
proto.filecoin.fpa.pb.ShowReply.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created = 2;
 * @return {number}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.fpa.pb.ShowReply} returns this
 */
proto.filecoin.fpa.pb.ShowReply.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional HotInfo hot = 3;
 * @return {?proto.filecoin.fpa.pb.ShowReply.HotInfo}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.getHot = function() {
  return /** @type{?proto.filecoin.fpa.pb.ShowReply.HotInfo} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.fpa.pb.ShowReply.HotInfo, 3));
};


/**
 * @param {?proto.filecoin.fpa.pb.ShowReply.HotInfo|undefined} value
 * @return {!proto.filecoin.fpa.pb.ShowReply} returns this
*/
proto.filecoin.fpa.pb.ShowReply.prototype.setHot = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.fpa.pb.ShowReply} returns this
 */
proto.filecoin.fpa.pb.ShowReply.prototype.clearHot = function() {
  return this.setHot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.hasHot = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ColdInfo cold = 4;
 * @return {?proto.filecoin.fpa.pb.ShowReply.ColdInfo}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.getCold = function() {
  return /** @type{?proto.filecoin.fpa.pb.ShowReply.ColdInfo} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.fpa.pb.ShowReply.ColdInfo, 4));
};


/**
 * @param {?proto.filecoin.fpa.pb.ShowReply.ColdInfo|undefined} value
 * @return {!proto.filecoin.fpa.pb.ShowReply} returns this
*/
proto.filecoin.fpa.pb.ShowReply.prototype.setCold = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.fpa.pb.ShowReply} returns this
 */
proto.filecoin.fpa.pb.ShowReply.prototype.clearCold = function() {
  return this.setCold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.fpa.pb.ShowReply.prototype.hasCold = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.filecoin.fpa.pb);
