/* eslint-disable */
// source: deals.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.filecoin.deals.pb.DealConfig', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.DealInfo', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.RetrieveReply', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.RetrieveRequest', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.StoreParams', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.StoreReply', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.StoreRequest', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.StoreRequest.PayloadCase', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.WatchReply', null, global);
goog.exportSymbol('proto.filecoin.deals.pb.WatchRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.DealConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.deals.pb.DealConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.DealConfig.displayName = 'proto.filecoin.deals.pb.DealConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.DealInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.deals.pb.DealInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.DealInfo.displayName = 'proto.filecoin.deals.pb.DealInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.StoreParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.filecoin.deals.pb.StoreParams.repeatedFields_, null);
};
goog.inherits(proto.filecoin.deals.pb.StoreParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.StoreParams.displayName = 'proto.filecoin.deals.pb.StoreParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.StoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.filecoin.deals.pb.StoreRequest.oneofGroups_);
};
goog.inherits(proto.filecoin.deals.pb.StoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.StoreRequest.displayName = 'proto.filecoin.deals.pb.StoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.StoreReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.filecoin.deals.pb.StoreReply.repeatedFields_, null);
};
goog.inherits(proto.filecoin.deals.pb.StoreReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.StoreReply.displayName = 'proto.filecoin.deals.pb.StoreReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.WatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.filecoin.deals.pb.WatchRequest.repeatedFields_, null);
};
goog.inherits(proto.filecoin.deals.pb.WatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.WatchRequest.displayName = 'proto.filecoin.deals.pb.WatchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.WatchReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.deals.pb.WatchReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.WatchReply.displayName = 'proto.filecoin.deals.pb.WatchReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.RetrieveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.deals.pb.RetrieveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.RetrieveRequest.displayName = 'proto.filecoin.deals.pb.RetrieveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.filecoin.deals.pb.RetrieveReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.filecoin.deals.pb.RetrieveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.filecoin.deals.pb.RetrieveReply.displayName = 'proto.filecoin.deals.pb.RetrieveReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.DealConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.DealConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.DealConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.DealConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    miner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    epochprice: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.DealConfig}
 */
proto.filecoin.deals.pb.DealConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.DealConfig;
  return proto.filecoin.deals.pb.DealConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.DealConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.DealConfig}
 */
proto.filecoin.deals.pb.DealConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.DealConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.DealConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.DealConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.DealConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpochprice();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string miner = 1;
 * @return {string}
 */
proto.filecoin.deals.pb.DealConfig.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.DealConfig} returns this
 */
proto.filecoin.deals.pb.DealConfig.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 epochPrice = 2;
 * @return {number}
 */
proto.filecoin.deals.pb.DealConfig.prototype.getEpochprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.deals.pb.DealConfig} returns this
 */
proto.filecoin.deals.pb.DealConfig.prototype.setEpochprice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.DealInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.DealInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.DealInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.DealInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalcid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stateid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    statename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    miner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pieceref: msg.getPieceref_asB64(),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    priceperepoch: jspb.Message.getFieldWithDefault(msg, 7, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.DealInfo}
 */
proto.filecoin.deals.pb.DealInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.DealInfo;
  return proto.filecoin.deals.pb.DealInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.DealInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.DealInfo}
 */
proto.filecoin.deals.pb.DealInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalcid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStateid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPieceref(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriceperepoch(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.DealInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.DealInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.DealInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.DealInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalcid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStateid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPieceref_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPriceperepoch();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string proposalCid = 1;
 * @return {string}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getProposalcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setProposalcid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 stateID = 2;
 * @return {number}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getStateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setStateid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string stateName = 3;
 * @return {string}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getStatename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setStatename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string miner = 4;
 * @return {string}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes pieceRef = 5;
 * @return {!(string|Uint8Array)}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getPieceref = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes pieceRef = 5;
 * This is a type-conversion wrapper around `getPieceref()`
 * @return {string}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getPieceref_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPieceref()));
};


/**
 * optional bytes pieceRef = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPieceref()`
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getPieceref_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPieceref()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setPieceref = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 size = 6;
 * @return {number}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 pricePerEpoch = 7;
 * @return {number}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getPriceperepoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setPriceperepoch = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 duration = 8;
 * @return {number}
 */
proto.filecoin.deals.pb.DealInfo.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.deals.pb.DealInfo} returns this
 */
proto.filecoin.deals.pb.DealInfo.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.filecoin.deals.pb.StoreParams.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.StoreParams.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.StoreParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.StoreParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.StoreParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dealconfigsList: jspb.Message.toObjectList(msg.getDealconfigsList(),
    proto.filecoin.deals.pb.DealConfig.toObject, includeInstance),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.StoreParams}
 */
proto.filecoin.deals.pb.StoreParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.StoreParams;
  return proto.filecoin.deals.pb.StoreParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.StoreParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.StoreParams}
 */
proto.filecoin.deals.pb.StoreParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.filecoin.deals.pb.DealConfig;
      reader.readMessage(value,proto.filecoin.deals.pb.DealConfig.deserializeBinaryFromReader);
      msg.addDealconfigs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.StoreParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.StoreParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.StoreParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.StoreParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDealconfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.filecoin.deals.pb.DealConfig.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.filecoin.deals.pb.StoreParams.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.StoreParams} returns this
 */
proto.filecoin.deals.pb.StoreParams.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DealConfig dealConfigs = 2;
 * @return {!Array<!proto.filecoin.deals.pb.DealConfig>}
 */
proto.filecoin.deals.pb.StoreParams.prototype.getDealconfigsList = function() {
  return /** @type{!Array<!proto.filecoin.deals.pb.DealConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.filecoin.deals.pb.DealConfig, 2));
};


/**
 * @param {!Array<!proto.filecoin.deals.pb.DealConfig>} value
 * @return {!proto.filecoin.deals.pb.StoreParams} returns this
*/
proto.filecoin.deals.pb.StoreParams.prototype.setDealconfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.filecoin.deals.pb.DealConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.filecoin.deals.pb.DealConfig}
 */
proto.filecoin.deals.pb.StoreParams.prototype.addDealconfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.filecoin.deals.pb.DealConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filecoin.deals.pb.StoreParams} returns this
 */
proto.filecoin.deals.pb.StoreParams.prototype.clearDealconfigsList = function() {
  return this.setDealconfigsList([]);
};


/**
 * optional uint64 duration = 3;
 * @return {number}
 */
proto.filecoin.deals.pb.StoreParams.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.filecoin.deals.pb.StoreParams} returns this
 */
proto.filecoin.deals.pb.StoreParams.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.filecoin.deals.pb.StoreRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.filecoin.deals.pb.StoreRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  STOREPARAMS: 1,
  CHUNK: 2
};

/**
 * @return {proto.filecoin.deals.pb.StoreRequest.PayloadCase}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.filecoin.deals.pb.StoreRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.filecoin.deals.pb.StoreRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.StoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.StoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.StoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storeparams: (f = msg.getStoreparams()) && proto.filecoin.deals.pb.StoreParams.toObject(includeInstance, f),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.StoreRequest}
 */
proto.filecoin.deals.pb.StoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.StoreRequest;
  return proto.filecoin.deals.pb.StoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.StoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.StoreRequest}
 */
proto.filecoin.deals.pb.StoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.filecoin.deals.pb.StoreParams;
      reader.readMessage(value,proto.filecoin.deals.pb.StoreParams.deserializeBinaryFromReader);
      msg.setStoreparams(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.StoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.StoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.StoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoreparams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.filecoin.deals.pb.StoreParams.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional StoreParams storeParams = 1;
 * @return {?proto.filecoin.deals.pb.StoreParams}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.getStoreparams = function() {
  return /** @type{?proto.filecoin.deals.pb.StoreParams} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.deals.pb.StoreParams, 1));
};


/**
 * @param {?proto.filecoin.deals.pb.StoreParams|undefined} value
 * @return {!proto.filecoin.deals.pb.StoreRequest} returns this
*/
proto.filecoin.deals.pb.StoreRequest.prototype.setStoreparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.filecoin.deals.pb.StoreRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.deals.pb.StoreRequest} returns this
 */
proto.filecoin.deals.pb.StoreRequest.prototype.clearStoreparams = function() {
  return this.setStoreparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.hasStoreparams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes chunk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chunk = 2;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.filecoin.deals.pb.StoreRequest} returns this
 */
proto.filecoin.deals.pb.StoreRequest.prototype.setChunk = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.filecoin.deals.pb.StoreRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.filecoin.deals.pb.StoreRequest} returns this
 */
proto.filecoin.deals.pb.StoreRequest.prototype.clearChunk = function() {
  return jspb.Message.setOneofField(this, 2, proto.filecoin.deals.pb.StoreRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.deals.pb.StoreRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.filecoin.deals.pb.StoreReply.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.StoreReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.StoreReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.StoreReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.StoreReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    datacid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proposalcidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    faileddealsList: jspb.Message.toObjectList(msg.getFaileddealsList(),
    proto.filecoin.deals.pb.DealConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.StoreReply}
 */
proto.filecoin.deals.pb.StoreReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.StoreReply;
  return proto.filecoin.deals.pb.StoreReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.StoreReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.StoreReply}
 */
proto.filecoin.deals.pb.StoreReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatacid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addProposalcids(value);
      break;
    case 3:
      var value = new proto.filecoin.deals.pb.DealConfig;
      reader.readMessage(value,proto.filecoin.deals.pb.DealConfig.deserializeBinaryFromReader);
      msg.addFaileddeals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.StoreReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.StoreReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.StoreReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.StoreReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatacid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProposalcidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getFaileddealsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.filecoin.deals.pb.DealConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dataCid = 1;
 * @return {string}
 */
proto.filecoin.deals.pb.StoreReply.prototype.getDatacid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.StoreReply} returns this
 */
proto.filecoin.deals.pb.StoreReply.prototype.setDatacid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string proposalCids = 2;
 * @return {!Array<string>}
 */
proto.filecoin.deals.pb.StoreReply.prototype.getProposalcidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.filecoin.deals.pb.StoreReply} returns this
 */
proto.filecoin.deals.pb.StoreReply.prototype.setProposalcidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.filecoin.deals.pb.StoreReply} returns this
 */
proto.filecoin.deals.pb.StoreReply.prototype.addProposalcids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filecoin.deals.pb.StoreReply} returns this
 */
proto.filecoin.deals.pb.StoreReply.prototype.clearProposalcidsList = function() {
  return this.setProposalcidsList([]);
};


/**
 * repeated DealConfig failedDeals = 3;
 * @return {!Array<!proto.filecoin.deals.pb.DealConfig>}
 */
proto.filecoin.deals.pb.StoreReply.prototype.getFaileddealsList = function() {
  return /** @type{!Array<!proto.filecoin.deals.pb.DealConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.filecoin.deals.pb.DealConfig, 3));
};


/**
 * @param {!Array<!proto.filecoin.deals.pb.DealConfig>} value
 * @return {!proto.filecoin.deals.pb.StoreReply} returns this
*/
proto.filecoin.deals.pb.StoreReply.prototype.setFaileddealsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.filecoin.deals.pb.DealConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.filecoin.deals.pb.DealConfig}
 */
proto.filecoin.deals.pb.StoreReply.prototype.addFaileddeals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.filecoin.deals.pb.DealConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filecoin.deals.pb.StoreReply} returns this
 */
proto.filecoin.deals.pb.StoreReply.prototype.clearFaileddealsList = function() {
  return this.setFaileddealsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.filecoin.deals.pb.WatchRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.WatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.WatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.WatchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.WatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.WatchRequest}
 */
proto.filecoin.deals.pb.WatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.WatchRequest;
  return proto.filecoin.deals.pb.WatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.WatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.WatchRequest}
 */
proto.filecoin.deals.pb.WatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addProposals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.WatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.WatchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.WatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.WatchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string proposals = 1;
 * @return {!Array<string>}
 */
proto.filecoin.deals.pb.WatchRequest.prototype.getProposalsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.filecoin.deals.pb.WatchRequest} returns this
 */
proto.filecoin.deals.pb.WatchRequest.prototype.setProposalsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.filecoin.deals.pb.WatchRequest} returns this
 */
proto.filecoin.deals.pb.WatchRequest.prototype.addProposals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.filecoin.deals.pb.WatchRequest} returns this
 */
proto.filecoin.deals.pb.WatchRequest.prototype.clearProposalsList = function() {
  return this.setProposalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.WatchReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.WatchReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.WatchReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.WatchReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealinfo: (f = msg.getDealinfo()) && proto.filecoin.deals.pb.DealInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.WatchReply}
 */
proto.filecoin.deals.pb.WatchReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.WatchReply;
  return proto.filecoin.deals.pb.WatchReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.WatchReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.WatchReply}
 */
proto.filecoin.deals.pb.WatchReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.filecoin.deals.pb.DealInfo;
      reader.readMessage(value,proto.filecoin.deals.pb.DealInfo.deserializeBinaryFromReader);
      msg.setDealinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.WatchReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.WatchReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.WatchReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.WatchReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDealinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.filecoin.deals.pb.DealInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional DealInfo dealInfo = 1;
 * @return {?proto.filecoin.deals.pb.DealInfo}
 */
proto.filecoin.deals.pb.WatchReply.prototype.getDealinfo = function() {
  return /** @type{?proto.filecoin.deals.pb.DealInfo} */ (
    jspb.Message.getWrapperField(this, proto.filecoin.deals.pb.DealInfo, 1));
};


/**
 * @param {?proto.filecoin.deals.pb.DealInfo|undefined} value
 * @return {!proto.filecoin.deals.pb.WatchReply} returns this
*/
proto.filecoin.deals.pb.WatchReply.prototype.setDealinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.filecoin.deals.pb.WatchReply} returns this
 */
proto.filecoin.deals.pb.WatchReply.prototype.clearDealinfo = function() {
  return this.setDealinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.filecoin.deals.pb.WatchReply.prototype.hasDealinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.RetrieveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.RetrieveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.RetrieveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.RetrieveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.RetrieveRequest}
 */
proto.filecoin.deals.pb.RetrieveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.RetrieveRequest;
  return proto.filecoin.deals.pb.RetrieveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.RetrieveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.RetrieveRequest}
 */
proto.filecoin.deals.pb.RetrieveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.RetrieveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.RetrieveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.RetrieveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.RetrieveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.filecoin.deals.pb.RetrieveRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.RetrieveRequest} returns this
 */
proto.filecoin.deals.pb.RetrieveRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cid = 2;
 * @return {string}
 */
proto.filecoin.deals.pb.RetrieveRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.filecoin.deals.pb.RetrieveRequest} returns this
 */
proto.filecoin.deals.pb.RetrieveRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.filecoin.deals.pb.RetrieveReply.prototype.toObject = function(opt_includeInstance) {
  return proto.filecoin.deals.pb.RetrieveReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.filecoin.deals.pb.RetrieveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.RetrieveReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.filecoin.deals.pb.RetrieveReply}
 */
proto.filecoin.deals.pb.RetrieveReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.filecoin.deals.pb.RetrieveReply;
  return proto.filecoin.deals.pb.RetrieveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.filecoin.deals.pb.RetrieveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.filecoin.deals.pb.RetrieveReply}
 */
proto.filecoin.deals.pb.RetrieveReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.RetrieveReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.filecoin.deals.pb.RetrieveReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.filecoin.deals.pb.RetrieveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.filecoin.deals.pb.RetrieveReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.filecoin.deals.pb.RetrieveReply.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.filecoin.deals.pb.RetrieveReply.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.filecoin.deals.pb.RetrieveReply.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.filecoin.deals.pb.RetrieveReply} returns this
 */
proto.filecoin.deals.pb.RetrieveReply.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.filecoin.deals.pb);
